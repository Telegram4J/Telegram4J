plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'com.github.ben-manes.versions' version '0.38.0'
}

ext {
    reactor_bom_version = '2020.0.20'
    immutables_version = '2.9.0'
    javax_annotation = '1.3.2'
    junit_version = '5.8.2'
    logback_version = '1.3.0-alpha14'
    caffeine_version = '3.1.1'

    tl_parser_version = '0.1.2-SNAPSHOT'

    isJitpack = System.getenv("JITPACK") == "true"
    isSnapshot = version.toString().endsWith("-SNAPSHOT")
}

allprojects {
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'com.github.ben-manes.versions'

    if (!isJitpack && !isSnapshot) {
        apply plugin: 'signing'
    }

    group = 'com.telegram4j'
    description = 'Java library for the Telegram API'

    targetCompatibility = JavaVersion.VERSION_11
    sourceCompatibility = JavaVersion.VERSION_11

    repositories {
        mavenLocal()
        mavenCentral()
        if (isJitpack || isSnapshot) {
            maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots' }
        }
    }

    dependencies {
        api platform("io.projectreactor:reactor-bom:$reactor_bom_version")
        api "com.github.ben-manes.caffeine:caffeine:$caffeine_version"

        api "com.telegram4j:tl-parser:$tl_parser_version"
    }

    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.incremental = true
    }

    tasks.withType(Javadoc) {
        if (JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }

        options {
            encoding = "UTF-8"
            addStringOption "encoding", "UTF-8"
            addStringOption "Xdoclint:none", "-quiet"
            tags = ["apiNote:a:API Note:",
                    "implSpec:a:Implementation Requirements:",
                    "implNote:a:Implementation Note:"]
        }
    }

    test {
        useJUnitPlatform()
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }
}

subprojects {
    archivesBaseName = "telegram4j-$project.name"

    jar {
        manifest {
            attributes 'Implementation-Title': archivesBaseName,
                    'Implementation-Version': archiveVersion,
                    'Automatic-Module-Name': "telegram4j.$project.name"
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifactId archivesBaseName

                versionMapping {
                    usage('java-api') {
                        fromResolutionOf('runtimeClasspath')
                    }
                    usage('java-runtime') {
                        fromResolutionResult()
                    }
                }

                pom {
                    name = 'Telegram4J'
                    description = 'A java MTPtoro library for the Telegram API'
                    url = 'https://github.com/Telegram4J/Telegram4J'
                    inceptionYear = '2021'

                    developers {
                        developer {
                            name = 'The Telegram4J'
                        }
                    }

                    licenses {
                        license {
                            name = 'GPL-3.0'
                            url = 'https://github.com/Telegram4J/Telegram4J/LICENSE'
                            distribution = 'repo'
                        }
                    }

                    scm {
                        url = 'https://github.com/Telegram4J/Telegram4J'
                        connection = 'scm:git:git://github.com/Telegram4J/Telegram4J.git'
                        developerConnection = 'scm:git:ssh://git@github.com:Telegram4J/Telegram4J.git'
                    }
                }
            }
        }


        if (!isJitpack) {
            repositories {
                maven {
                    if (isSnapshot) {
                        url 'https://s01.oss.sonatype.org/content/repositories/snapshots'
                    } else {
                        url 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2'
                    }

                    def sonatypeUsername = findProperty('sonatypeUsername')
                    def sonatypePassword = findProperty('sonatypePassword')
                    if (sonatypeUsername != null && sonatypePassword != null) {
                        credentials {
                            username sonatypeUsername
                            password sonatypePassword
                        }
                    }
                }
            }
        }
    }

    if (!isJitpack && !isSnapshot) {
        signing {
            def signingKey = findProperty('signingKey')
            def signingPassword = findProperty('signingPassword')
            if (signingKey != null && signingPassword != null) {
                useInMemoryPgpKeys(signingKey, signingPassword)
            }
            sign publishing.publications.mavenJava
        }
    }
}
